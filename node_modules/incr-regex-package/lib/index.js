/** 
 * Copyright (c) 2016, Nurul Choudhury
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 * 
 */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "contract", {
  enumerable: true,
  get: function get() {
    return _utils.contract;
  }
});
Object.defineProperty(exports, "RxParser", {
  enumerable: true,
  get: function get() {
    return _regexpParser.RxParser;
  }
});
Object.defineProperty(exports, "MANY", {
  enumerable: true,
  get: function get() {
    return _rxtree.MANY;
  }
});
Object.defineProperty(exports, "TERM", {
  enumerable: true,
  get: function get() {
    return _rxtree.TERM;
  }
});
Object.defineProperty(exports, "PERHAPS_MORE", {
  enumerable: true,
  get: function get() {
    return _rxtree.PERHAPS_MORE;
  }
});
Object.defineProperty(exports, "BOUNDARY", {
  enumerable: true,
  get: function get() {
    return _rxtree.BOUNDARY;
  }
});
Object.defineProperty(exports, "matchable", {
  enumerable: true,
  get: function get() {
    return _rxtree.matchable;
  }
});
Object.defineProperty(exports, "boundary", {
  enumerable: true,
  get: function get() {
    return _rxtree.boundary;
  }
});
Object.defineProperty(exports, "dot", {
  enumerable: true,
  get: function get() {
    return _rxtree.dot;
  }
});
Object.defineProperty(exports, "or", {
  enumerable: true,
  get: function get() {
    return _rxtree.or;
  }
});
Object.defineProperty(exports, "zero_or_one", {
  enumerable: true,
  get: function get() {
    return _rxtree.zero_or_one;
  }
});
Object.defineProperty(exports, "zero_or_more", {
  enumerable: true,
  get: function get() {
    return _rxtree.zero_or_more;
  }
});
Object.defineProperty(exports, "anychar", {
  enumerable: true,
  get: function get() {
    return _rxtree.anychar;
  }
});
Object.defineProperty(exports, "charset", {
  enumerable: true,
  get: function get() {
    return _rxtree.charset;
  }
});
Object.defineProperty(exports, "OP", {
  enumerable: true,
  get: function get() {
    return _rxtree.OP;
  }
});
Object.defineProperty(exports, "SKIP", {
  enumerable: true,
  get: function get() {
    return _rxtree.SKIP;
  }
});
Object.defineProperty(exports, "BS", {
  enumerable: true,
  get: function get() {
    return _rxtree.BS;
  }
});
Object.defineProperty(exports, "LP", {
  enumerable: true,
  get: function get() {
    return _rxtree.LP;
  }
});
Object.defineProperty(exports, "RP", {
  enumerable: true,
  get: function get() {
    return _rxtree.RP;
  }
});
Object.defineProperty(exports, "OR", {
  enumerable: true,
  get: function get() {
    return _rxtree.OR;
  }
});
Object.defineProperty(exports, "ZERO_OR_ONE", {
  enumerable: true,
  get: function get() {
    return _rxtree.ZERO_OR_ONE;
  }
});
Object.defineProperty(exports, "ZERO_OR_MORE", {
  enumerable: true,
  get: function get() {
    return _rxtree.ZERO_OR_MORE;
  }
});
Object.defineProperty(exports, "ONE_OR_MORE", {
  enumerable: true,
  get: function get() {
    return _rxtree.ONE_OR_MORE;
  }
});
Object.defineProperty(exports, "DOT", {
  enumerable: true,
  get: function get() {
    return _rxtree.DOT;
  }
});
Object.defineProperty(exports, "FALSE", {
  enumerable: true,
  get: function get() {
    return _rxtree.FALSE;
  }
});
Object.defineProperty(exports, "DONE", {
  enumerable: true,
  get: function get() {
    return _rxtree.DONE;
  }
});
Object.defineProperty(exports, "MAYBE", {
  enumerable: true,
  get: function get() {
    return _rxtree.MAYBE;
  }
});
Object.defineProperty(exports, "MORE", {
  enumerable: true,
  get: function get() {
    return _rxtree.MORE;
  }
});
Object.defineProperty(exports, "FAILED", {
  enumerable: true,
  get: function get() {
    return _rxtree.FAILED;
  }
});
Object.defineProperty(exports, "RX_OP", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_OP;
  }
});
Object.defineProperty(exports, "RX_UNARY", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_UNARY;
  }
});
Object.defineProperty(exports, "RX_CONS", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_CONS;
  }
});
Object.defineProperty(exports, "RX_OR", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_OR;
  }
});
Object.defineProperty(exports, "RX_ZERO_OR_ONE", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_ZERO_OR_ONE;
  }
});
Object.defineProperty(exports, "RX_ZERO_OR_MORE", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_ZERO_OR_MORE;
  }
});
Object.defineProperty(exports, "RX_ONE_OR_MORE", {
  enumerable: true,
  get: function get() {
    return _rxtree.RX_ONE_OR_MORE;
  }
});
Object.defineProperty(exports, "copyNode", {
  enumerable: true,
  get: function get() {
    return _rxtree.copyNode;
  }
});
Object.defineProperty(exports, "stdRxMeta", {
  enumerable: true,
  get: function get() {
    return _rxtree.stdRxMeta;
  }
});
Object.defineProperty(exports, "makeCharSet", {
  enumerable: true,
  get: function get() {
    return _rxtree.makeCharSet;
  }
});
Object.defineProperty(exports, "makeFSM", {
  enumerable: true,
  get: function get() {
    return _rxtree.makeFSM;
  }
});
Object.defineProperty(exports, "rxMatchArr", {
  enumerable: true,
  get: function get() {
    return _rxtree.rxMatchArr;
  }
});
Object.defineProperty(exports, "rxNextState", {
  enumerable: true,
  get: function get() {
    return _rxtree.rxNextState;
  }
});
Object.defineProperty(exports, "rxMatch", {
  enumerable: true,
  get: function get() {
    return _rxtree.rxMatch;
  }
});
Object.defineProperty(exports, "rxCanReach", {
  enumerable: true,
  get: function get() {
    return _rxtree.rxCanReach;
  }
});
Object.defineProperty(exports, "rxGetActualStartState", {
  enumerable: true,
  get: function get() {
    return _rxtree.rxGetActualStartState;
  }
});
Object.defineProperty(exports, "advancedRxMatcher", {
  enumerable: true,
  get: function get() {
    return _rxtree.advancedRxMatcher;
  }
});
Object.defineProperty(exports, "incrRegEx", {
  enumerable: true,
  get: function get() {
    return _incrRegexV.incrRegEx;
  }
});
Object.defineProperty(exports, "IREGEX", {
  enumerable: true,
  get: function get() {
    return _incrRegexV.IREGEX;
  }
});
Object.defineProperty(exports, "convertMask", {
  enumerable: true,
  get: function get() {
    return _incrRegexV.convertMask;
  }
});
Object.defineProperty(exports, "isMeta", {
  enumerable: true,
  get: function get() {
    return _incrRegexV.isMeta;
  }
});
Object.defineProperty(exports, "isOptional", {
  enumerable: true,
  get: function get() {
    return _incrRegexV.isOptional;
  }
});
Object.defineProperty(exports, "isHolder", {
  enumerable: true,
  get: function get() {
    return _incrRegexV.isHolder;
  }
});
Object.defineProperty(exports, "printExpr", {
  enumerable: true,
  get: function get() {
    return _rxprint.printExpr;
  }
});
Object.defineProperty(exports, "printExprS", {
  enumerable: true,
  get: function get() {
    return _rxprint.printExprS;
  }
});
Object.defineProperty(exports, "RXInputMask", {
  enumerable: true,
  get: function get() {
    return _RxInputMask.RXInputMask;
  }
});
Object.defineProperty(exports, "RxMatcher", {
  enumerable: true,
  get: function get() {
    return _RxMatcher.RxMatcher;
  }
});

var _utils = require("./utils");

var _regexpParser = require("./regexp-parser");

var _rxtree = require("./rxtree");

var _incrRegexV = require("./incr-regex-v3");

var _rxprint = require("./rxprint");

var _RxInputMask = require("./inputmask/RxInputMask");

var _RxMatcher = require("./RxMatcher");

if (_incrRegexV.incrRegEx === undefined) throw new Error("incrRegEx not defined");
if (_RxInputMask.RXInputMask === undefined) throw new Error("RXInputMask not defined");
if (_RxMatcher.RxMatcher === undefined) throw new Error("RxMatcher not defined");
/*
window.incrRegEx = {
  DONE,MORE,MAYBE,FAILED,incrRegEx,printExpr,RxParser,RXInputMask, contract, RxMatcher,
  matchable,dot,or,zero_or_one,zero_or_more, IREGEX, 
  convertMask ,isMeta, isOptional,isHolder 
};
*/

/*
const contract = {
  nat32,
  func, isFunc,
  typeOf, isTypeOf,
  arr, isArr,
  classOf, isClassOf,
  instanceOf, 
  isUndef
};


*/